%\VignetteIndexEntry{Usage Examples}
\documentclass[a4paper]{article}
\title{ txome.ai R API Examples }
\author{ Joshua P. Katz }
\begin{document}
\maketitle
The following sections are re-creations of report figures
generated by txome.ai. They illustate the simplicty of API access
with varying plot complexity. To run any of the examples, assign 
\textbf{url} to a report URL you have access to.
\bigbreak
\Large Table of Contents
\normalsize
\begin{enumerate}
    \item Contamination Summary
    \item Transcript Integrity
    \item Spearman Correlation
    \item High Variance Genes
    \item Differential Gene Expression
\end{enumerate}
\clearpage
\section{ Contamination Summary }

The "ContaminationSummary" table consists of sample ids, 
result types, and ratio of results. So all we need to do is create a matrix 
of the ratios with result types as rows and sample ids as columns.

<<eval=FALSE>>=
report = txomeai::txomeai_connect(url)
contam = txomeai::txomeai_get(report, "ContaminationSummary")
sample_count = length(unique(contam$key))
result_type = length(unique(contam$type))
contam_matrix = matrix(contam$ratio, nrow=result_type, ncol=sample_count, 
    dimnames=list(unique(contam$type), unique(contam$key)))
par(las=2, mar=c(7,5,2,0))
barplot(contam_matrix, ylab="Proportion")
@
\begin{center}
\includegraphics{barplot}
\end{center}
\clearpage

\section{ Transcript Integrity }

The "TranscriptIntegrityStats" table contains sample meta data and the raw
Transcript Integrity list in the \textbf{get} column. The raw stats table
is \textbf{transcript\_stats} and it can be directly referenced to build
the expected histogram.

<<eval=FALSE>>=
report = txomeai::txomeai_connect(url)
tis = txomeai::txomeai_get(report, "TranscriptIntegrityStats")
hist(tis$get[[1]]$data$raw$transcript_stats$tin, 
    main=tis$description[[1]], breaks=100, xlab="TIN")
@
\begin{center}
\includegraphics{tis}
\end{center}
\clearpage

\section{ Spearman Correlation }

The "SpearmanCorrelation" table contains the correlation matrix between all samples 
with some additional meta data. We can directly reference the correlation values
and provide one meta data column to build the desired heatmap.

<<eval=FALSE>>=
report = txomeai::txomeai_connect(url)
spearman = txomeai::txomeai_get(report, "SpearmanCorrelation")
heatmap(as.matrix(spearman[,2:(length(colnames(spearman))-1)]), 
    labRow=spearman$sample, main="Spearman Correlation", margin=c(6,6))
@
\begin{center}
\includegraphics{spearman}
\end{center}
\clearpage

\section{ High Variance Genes }

The "HighVarianceGenes" table contains the step meta data and the raw
TPM expression values for every sample in the \textbf{get} column.
Below we process the results into a data.frame, calculate some auxillary
measurements, and plot at most ten genes from the results.


<<eval=FALSE>>=
report = txomeai::txomeai_connect(url)
hvg = txomeai::txomeai_get(report, "HighVarianceGenes")
expression_mean = unlist(lapply(hvg$get[[1]]$data$raw$sample_expression, 
    FUN=function(x){return(mean(x$expression));}))
expression_df = rbindlist(hvg$get[[1]]$data$raw$sample_expression)
sample_count = length(hvg$get[[1]]$data$raw$sample_expression[[1]]$sample)
gene_names = hvg$get[[1]]$data$raw$gene
expression_df$gene = unlist(lapply(gene_names, FUN=rep, sample_count))
expression_df$gene_index = unlist(lapply(1:length(gene_names), 
    FUN=rep, sample_count))
plot_count = min(10, length(expression_mean))
plot_points = expression_df[expression_df$gene_index <= plot_count,]
plot_points$sample = as.factor(plot_points$sample)
min_exp = min(plot_points$expression)
max_exp = max(plot_points$expression)
x_max = max_exp + (0.4 * (max_exp-min_exp))
par(mar=c(5,6,1,1))
plot(expression_mean[1:plot_count], 1:plot_count, xlim=c(min_exp,x_max), 
    type='l', axes=FALSE, ylab="", xlab="Log(1+TPM)")
points(plot_points$expression, plot_points$gene_index, col=plot_points$sample, 
    type="p", pch=20)
axis(1)
par(las=2)
axis(2, labels=gene_names[1:plot_count], at=1:plot_count)
legend(max_exp, plot_count, levels(plot_points$sample), 
    col=1:sample_count, pch=20)
@
\begin{center}
\includegraphics{hvg}
\end{center}
\clearpage

\section{ Differential Gene Expression }

The "DifferentialGeneExpression" table contains the differential expression
results for a comparative analysis. If multiple comparisons were provided
then the \textbf{key} column will differentiate each comparison if you download all 
results. This applies to all comparative analysis.

<<eval=FALSE>>=
dge_analysis = report$ls[report$ls$name == "DifferentialGeneExpression",]
dge = txomeai::txomeai_get(report, "DifferentialGeneExpression", dge_analysis$key[[1]])
# Collect analysis description
dge_descr = dge_analysis$description[[1]]
# Data cleanup 
dge$pvalue = as.numeric(dge$pvalue)
dge$pvalue[dge$pvalue == 0] = 1e-300
dge$log2FoldChange = as.numeric(dge$log2FoldChange)
dge = dge[!is.na(pvalue) & !is.na(log2FoldChange),]
dge$log10s = -1*log(dge$pvalue,10)
dge = dge[1:100,]
# Build plot
par(mar=c(5,5,5,1))
plot(dge$log2FoldChange, dge$log10s, type="p", xlab="Log2 Fold Change", ylab="-Log10S-value")
abline(h=-1*log(10e-6,10), col="red")
abline(v=1, col="red")
abline(v=-1, col="red")
title(dge_descr)
@
\begin{center}
\includegraphics{dge}
\end{center}

\end{document}
